(function() {
  var SimpleTermView, div, h3, small;

  div = function() {
    var _ref;
    return (_ref = React.DOM).div.apply(_ref, arguments);
  };

  h3 = function() {
    var _ref;
    return (_ref = React.DOM).h3.apply(_ref, arguments);
  };

  small = function() {
    var _ref;
    return (_ref = React.DOM).small.apply(_ref, arguments);
  };

  SimpleTermView = React.createClass({
    showPreview: function(course) {
      return window.showCoursePreview(course);
    },
    hidePreview: function() {
      return window.hidePreview();
    },
    render: function() {
      var terms;
      terms = data.schedule.map((function(_this) {
        return function(term, i) {
          var currentTermCourses, termName;
          termName = calculateTerm(data.startYear, data.startTerm, i);
          currentTermCourses = term.courses.map(function(course, j) {
            var courseInfo;
            courseInfo = uwapi.getInfo(course);
            return div({
              className: "course",
              onMouseEnter: _this.showPreview.bind(_this, course),
              onMouseLeave: _this.hidePreview
            }, getCourseName(courseInfo));
          });
          if (term.courses.length === 0) {
            currentTermCourses = div(null, div({
              className: "course moveBlock invisible"
            }), div({
              className: "backgroundText"
            }, "No course for this term."));
          }
          return div({
            className: "term"
          }, div({
            className: "term-title"
          }, termName), div({
            className: "term-menu"
          }), div({
            className: "courses"
          }, currentTermCourses), div({
            className: "clearfix"
          }));
        };
      })(this));
      return div({
        className: "container"
      }, h3({
        className: "page-header"
      }, data.name, " ", small(null, "by " + data.user.name)), div({
        className: "col-xs-12 terms"
      }, terms));
    }
  });

  $(function() {
    return React.renderComponent(SimpleTermView(null), $("#main").get(0));
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QUEsQ0FBSTtBQUFBLFFBQUMsU0FBQSxFQUFXLFdBQVo7T0FBSixFQUNFLEVBQUEsQ0FBRztBQUFBLFFBQUMsU0FBQSxFQUFXLGFBQVo7T0FBSCxFQUErQixJQUFJLENBQUMsSUFBcEMsRUFBMEMsR0FBMUMsRUFDRSxLQUFBLENBQU0sSUFBTixFQUFhLEtBQUEsR0FBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQTNCLENBREYsQ0FERixFQUdFLEdBQUEsQ0FBSTtBQUFBLFFBQUMsU0FBQSxFQUFXLGlCQUFaO09BQUosRUFBb0MsS0FBcEMsQ0FIRixFQW5CTTtJQUFBLENBSlI7R0FEZSxDQUxqQixDQUFBOztBQUFBLEVBa0NBLENBQUEsQ0FBRSxTQUFBLEdBQUE7V0FDQSxLQUFLLENBQUMsZUFBTixDQUFzQixjQUFBLENBQWUsSUFBZixDQUF0QixFQUE0QyxDQUFBLENBQUUsT0FBRixDQUFVLENBQUMsR0FBWCxDQUFlLENBQWYsQ0FBNUMsRUFEQTtFQUFBLENBQUYsQ0FsQ0EsQ0FBQTtBQUFBIiwiZmlsZSI6InNoYXJlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiXG5kaXYgPSAtPiBSZWFjdC5ET00uZGl2IGFyZ3VtZW50cy4uLlxuaDMgPSAtPiBSZWFjdC5ET00uaDMgYXJndW1lbnRzLi4uXG5zbWFsbCA9IC0+IFJlYWN0LkRPTS5zbWFsbCBhcmd1bWVudHMuLi5cblxuXG5TaW1wbGVUZXJtVmlldyA9IFJlYWN0LmNyZWF0ZUNsYXNzXG4gIHNob3dQcmV2aWV3OiAoY291cnNlKS0+XG4gICAgd2luZG93LnNob3dDb3Vyc2VQcmV2aWV3KGNvdXJzZSlcbiAgaGlkZVByZXZpZXc6IC0+XG4gICAgd2luZG93LmhpZGVQcmV2aWV3KClcbiAgcmVuZGVyOiAtPlxuICAgIHRlcm1zID0gZGF0YS5zY2hlZHVsZS5tYXAgKHRlcm0sIGkpPT5cbiAgICAgIHRlcm1OYW1lID0gY2FsY3VsYXRlVGVybSBkYXRhLnN0YXJ0WWVhciwgZGF0YS5zdGFydFRlcm0sIGlcbiAgICAgIGN1cnJlbnRUZXJtQ291cnNlcyA9IHRlcm0uY291cnNlcy5tYXAgKGNvdXJzZSwgaik9PlxuICAgICAgICBjb3Vyc2VJbmZvID0gdXdhcGkuZ2V0SW5mbyhjb3Vyc2UpXG4gICAgICAgIGRpdih7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcImNvdXJzZVwiXG4gICAgICAgICAgb25Nb3VzZUVudGVyOiBAc2hvd1ByZXZpZXcuYmluZCBALCBjb3Vyc2VcbiAgICAgICAgICBvbk1vdXNlTGVhdmU6IEBoaWRlUHJldmlld1xuICAgICAgICAgIH0sIGdldENvdXJzZU5hbWUoY291cnNlSW5mbykpXG4gICAgICBpZiB0ZXJtLmNvdXJzZXMubGVuZ3RoID09IDBcbiAgICAgICAgY3VycmVudFRlcm1Db3Vyc2VzID0gZGl2KG51bGwsIFxuICAgICAgICAgIGRpdih7Y2xhc3NOYW1lOiBcImNvdXJzZSBtb3ZlQmxvY2sgaW52aXNpYmxlXCJ9KSxcbiAgICAgICAgICBkaXYoe2NsYXNzTmFtZTogXCJiYWNrZ3JvdW5kVGV4dFwifSwgXCJObyBjb3Vyc2UgZm9yIHRoaXMgdGVybS5cIikpXG4gICAgICBkaXYoe2NsYXNzTmFtZTpcInRlcm1cIn0sIFxuICAgICAgICBkaXYoe2NsYXNzTmFtZTogXCJ0ZXJtLXRpdGxlXCJ9LCB0ZXJtTmFtZSksXG4gICAgICAgIGRpdih7Y2xhc3NOYW1lOiBcInRlcm0tbWVudVwifSksXG4gICAgICAgIGRpdih7Y2xhc3NOYW1lOiBcImNvdXJzZXNcIn0sIGN1cnJlbnRUZXJtQ291cnNlcyksXG4gICAgICAgIGRpdih7Y2xhc3NOYW1lOiBcImNsZWFyZml4XCJ9KSlcbiAgICBkaXYoe2NsYXNzTmFtZTogXCJjb250YWluZXJcIn0sXG4gICAgICBoMyh7Y2xhc3NOYW1lOiBcInBhZ2UtaGVhZGVyXCJ9LCBkYXRhLm5hbWUsIFwiIFwiLFxuICAgICAgICBzbWFsbChudWxsLCBcImJ5ICN7ZGF0YS51c2VyLm5hbWV9XCIpKSxcbiAgICAgIGRpdih7Y2xhc3NOYW1lOiBcImNvbC14cy0xMiB0ZXJtc1wifSwgdGVybXMpKVxuXG4kKC0+XG4gIFJlYWN0LnJlbmRlckNvbXBvbmVudCBTaW1wbGVUZXJtVmlldyhudWxsKSwgJChcIiNtYWluXCIpLmdldCgwKVxuKSJdfQ==